0:
1:
2:
3:
4:
5:
6:
7:

Process digits from right to left

<INPUT ARRAY>
0: 12
1: 13
2: 14
3: 15
4: 22
5: 23
6: 24
7: 25

1st| Count occurances of digit
<COUNT ARRAY>
0: 0
1: 0
2: 2
3: 2
4: 2
5: 2
6: 0
7: 0

2nd| Rolling Summation to be used next as positions
<COUNT ARRAY>
0: -1 (Subtract 1 from 0 position)
1: -1 (-1+0 = -1)
2: 1  (-1+2 = 1)
3: 3  (1+2 = 3)
4: 5
5: 7
6: 7
7: 7

3rd| use Count array to decide where to move values into Auxiliary array (AA)

0   1   2   3   4   5   6   7   8   9
12  13  14  15  22  23  24  25
-1  -1  1   3   5   7   7   7   7   7
                                    
                            25          //25 Current digit 5 >> Position 5： 7 >>  AA: 7)
-1  -1  1   3   5   6   7   7   7   7   //Decrement value of CA position 5

                    24      25           //24 Current digit 4 >> Position 4： 5 >>  AA: 5)
-1  -1  1   3   4   6   7   7   7   7    //Decrement value of CA position 4

            23      24      25          //23 Current digit 3 >> Position 3： 3 >>  AA: 3)
-1  -1  1   2   4   6   7   7   7   7   //Decrement value of CA position 3

    22      23      24      25          //22 Current digit 2 >> Position 2： 1 >>  AA: 1)
-1  -1  0   2   4   6   7   7   7   7   //Decrement value of CA position 2

    22      23      24      25          //15 Current digit 5 >> Position 5： 6 >>  AA: 6)
-1  -1  0   2   4   5   7   7   7   7   //Decrement value of CA position 5

    22      23  14  24  15  25          //14 Current digit 4 >> Position 4： 4 >>  AA: 4)
-1  -1  0   2   3   5   7   7   7   7   //Decrement value of CA position 4

    22  13  23  14  24  15  25          //13 Current digit 3 >> Position 3： 2 >>  AA: 2)
-1  -1  0   1   3   5   7   7   7   7   //Decrement value of CA position 3

12  22  13  23  14  24  15  25          //12 Current digit 2 >> Position 2： 0 >>  AA: 0)
-1  -1  -1   1   3   5   7   7   7   7   //Decrement value of CA position 2

>>
0   1   2   3   4   5   6   7   8   9
12  13  14  15  22  23  24  25
-1  -1  -1   1   3   5   7   7   7   7  
12  22  13  23  14  24  15  25     

0   1   2   3   4   5   6   7   8   9
12  13  14  15  22  23  24  25
0   0   0   0   0   0   0   0
12  22  13  23  14  24  15  25  

4th | Move above Auxiliary Array value to Input Array
0   1   2   3   4   5   6   7   8   9
12  22  13  23  14  24  15  25  
0   0   0   0   0   0   0   0

12, 13, 14, 15 has current digit 1
22, 23, 24, 25 has current digit 2
0: 0
1: 4
2: 4
3: 0
4: 0
5: 0
6: 0
7: 0

Rolling Summation
0   1   2   3   4   5   6   7   8   9
12  22  13  23  14  24  15  25  
-1  3   7   7   7   7   7   7 

25 Ia7 Cd2 >> Ca2 7 >> Aa7  >>Ca2 7-1=6
15 Ia6 Cd1 >> Ca1 3 >> Aa3  >>Ca1 3-1=2
24 Ia5 Cd2 >> Ca2 6 >> Aa7  >>Ca2 6-1=5
...

0   1   2   3   4   5   6   7   8   9
12  22  13  23  14  24  15  25  
-1  -1  3   7   7   7   7   7   7 
12  13  14  15  22  23  24  25

>>
0   1   2   3   4   5   6   7   8   9
12  13  14  15  22  23  24  25
0   0   0   0   0   0   0   0

//DONE SORTING
                  0   1   2   3   4   5   6   7   8   9 ...(Size + 1)
Input Array     :
Counting Array  :
Auxiliary Array :

Number of pass = digits(each pass check one digit)
Start from left most digit to right

1st: Count how many times this digit appear and put in count array
2nd: Start from right most number, if is this digit, check this digit as index in count array to get X, put this number at X index in Auxiliary Array

