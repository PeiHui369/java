

@Swapping 2 vars
temp = a;
a = b;
b = temp; 

@sumDigits
int sum = 0;
while (n != 0) {
            sum += n % 10;
            n /= 10;
        }

@ reverseString
char[] letters = str.toCharArray();
for (int i = letters.length - 1; i >= 0; i--) {}	//print from last ele to first ele

@ count Letters, Spaces, Numbers, other Char
char[] ch = str.toCharArray();
Character.isLetter(ch[i]); //Repeat for .isDigit(), .isSpaceChar(); other Char use else{}
			
@ check even or odd
- even: n%2 == 0
- odd: n%2 != 0

@ divisible by i
n%i == 0

@ convert STRING to INT
Integer.parseInt(str)

@convert seconds to hour,minute&seconds
- SS : sec%60
- MM : sec%60/60
- HH : sec/60/60
	int S = seconds % 60;
        int H = seconds / 60;
        int M = H % 60;
        H = H / 60;

@ factors
	int ctr = 0;
        for(int i=1; i<=(int)Math.sqrt(num); i++) {
            if(num%i==0 && i*i!=num) {
                ctr+=2;
            } else if (i*i==num) {
                ctr++;
            }
        }

@ read int, calc sumOfDigits, write num of each digit of sum in English
<Main> //can use back sumDigits
char[] numStr = str.toCharArray();
for (int i = 0; i < numStr.length; i ++) {
	sum += numStr[i] - '0';			//[?QTA : why must '0' ---EX87]
}
<printNumber.java>
String[] number = {"zero","one","two","three","four","five","six","seven","eight","nine"};
//n is sumOfDigit
if (n < 10) {	//1 digit
	System.out.println(number[n]);
}
else if (n < 100) {	//2 digits
	x = n / 10;		//x=24/10 = 2
	y = n - x *10;		//y=24-2*10 = 4
	System.out.println("In English: "+number[x] + " " + number[y]);
}
else {			//3 digits
	x = n / 100;			
	y = (n - x * 100) / 10;
	z = n - x * 100 - y * 10;
	System.out.println("In English: "+number[x] + " " + number[y] + " " + number[z]);
}

<3 or n int>
@ sum of 2 int equal to 3rd
((p + q) == r || (q + r) == p || (r + p) == q)

@ 2nd > 1st; 3rd > 2nd; abc true, 2nd nonid >1st
if(abc)
	return (r > q);
return (q > p && r > q);

@ >=2 have same rightmost digit (all int +)
(p % 10 == q % 10) || (p % 10 == r % 10) || (q % 10 == r % 10)

@ no. of integers within range x to y, divisible by z
for(int i = x; i<=y; i++){
            if(i%p==0){count++;}
        }
OR
if (x%p == 0)
	return( y/p - x/p + 1);
return(y/p - x/p);

@ one of them is 20 or more and less than the substractions of others. (total 3 int)
(Math.abs(x - y) >= 20 || Math.abs(y - z) >= 20 || Math.abs(z - x) >= 20)

@ 2 int; return larger; if 2 same, return 0 & if /6 same remainder, return smaller value;
	if(x == y)
		return 0;
	    if(x % 6 == y % 6)
		    return (x < y) ? x : y;
	return (x > y) ? x : y;

@ 2 int between 25 to 75; common digit true
	if (p<25 || q>75)			//check in range
		   return false;
	   int x = p % 10;			//check leftmost digit
	   int y = q % 10;
	   p /= 10;				//check rightmost digit
	   q /= 10;
	   return (p == q || p == y || x == q || x == y);

@ 2 int, calc modulus of 2 num without using %
int divided = a / b;
int result = a - (divided * b);

@ compute sum of PRIME NUMBERS till 100
// prime
public static boolean is_Prime(int n) {
		for (int i = 3; i * i <= n; i+= 2) {
			if (n % i == 0) {
				return false; 
			}
		}
		return true;
	}
	
//sum of 100 prime num
while (ctr < 100) {
			n++; 
			if (n % 2 != 0) { 
			// check if the number is even
				if (is_Prime(n)) {
					sum += n; 					
				}
			}
                    ctr++; 	
		}
		


<PRINTF>
%d : int
%n : (platform indipendent) special code (placeholder) for new-line symbol (that might be \r\n or \n) in formatted string and \n is an actual symbol.
\n : new line
\t : 4 spaces

<System.out.format>
%tc: (dateTimeFormat) weekday month DD HH:MM:SS PDT year //%Tc: weekday & month in upper case

<Characters>
@ unique 3-digit numbers
- for(x=1; x<=4; x++); if(x!=y!=z); increase amount, print x y z
for(int i = 1; i <= 4; i++){
			for(int j = 1; j <= 4; j++){
				for(int k = 1; k <= 4; k++){
					if(k != i && k != j && i != j){
						amount++;
						System.out.println(i + "" + j + "" + k);
						}}}}

@ list available character sets in charset objects
-#Charset.availableCharsets().keySet()	//Take this as array
for (String str : Charset.availableCharsets().keySet()) {
      System.out.println(str);
    }
    
@ ASCII value of char
int chr = 'Z'; //print chr

<String>
@ Capitalize first letter
Scanner in = new Scanner(System.in);		//create Scanner
String line = in.nextLine();			//get input
String upper_case_line = ""; 			//Initialize str var
Scanner lineScan = new Scanner(line); 		//#Create scanner object
while(lineScan.hasNext()) {
             String word = lineScan.next(); 
             upper_case_line += Character.toUpperCase(word.charAt(0)) + word.substring(1) + " "; 
         }

@ convert str to lowercase
- #str.toLowerCase();
String line = in.nextLine();
	 line = line.toLowerCase();

@ find penultimate(next to last) word of a sentence
-# str.split("regex"); https://www.geeksforgeeks.org/split-string-java-examples/
String[] words = line.split("[ ]+"); //regex can be "[ ]+" or just " " for empty spaces
System.out.println("Penultimate word: "+words[words.length - 2]);
	 
@ reverse word
String word = in.nextLine();
word = word.trim();			//Remove leading & trailing white-space chars from string
String result = ""; 
char[] ch=word.toCharArray();  
for (int i = ch.length - 1; i >= 0; i--) {	//print from end to start of arr
	result += ch[i];
} //print(result.trim());

@ Insert word in middle of str
- Tutorial in Python 3.0
main_string.substring(0, 7) + word + main_string.substring(6)

@ 4 copies of last 3 char
String last3 = str.substring(str.length()-3);
System.out.println(last3 + last3 + last3 + last3);

@ extract first half of string of even length
str.substring(0, str.length()/2)

@ print shortString + longString + shortString
	if(str1.length() >= str2.length())
		System.out.println( str2+str1+str2);
	else
	System.out.println(str1+str2+str1);	
	
@ concatenation of 2 strs (remove first char of each)
str1.substring(1) + str2.substring(1)

@ take first 3 char, if str length < 3 use # substitute
	String str1 = "rr";
        int len = str1.length();
        if(len >= 3)
            System.out.println( str1.substring(0, 3));
        else if(len == 1)
            System.out.println( (str1.charAt(0)+"##"));
        else if(len == 2)
            System.out.println( (str1 +"#"));
        else
            System.out.println("###");
		
@ take first char str1 & last char str2, if str len 0 use #
	String result = "";
	result += (str1.length() >= 1) ? str1.charAt(0) : '#';
	result += (str.length() >= 1) ? str2.charAt(str2.length()-1) : '#';
	
@ take last 3 char, put at front & back
//if strLength < 3, return str
    String subpart = string1.substring(string1.length()-3);
    System.out.println(subpart + string1 + subpart);

*@ str start with specified word
System.out.println(str.startsWith("specifiedWord"));

<Array>
@ Test x appears either first or last ele
(num_array[0] == 10 || num_array[num_array.length-1] == 10)

@ Test first & last ele same; Length>=2
(num_array.length >= 2 && num_array[0] ==  num_array[num_array.length-1])

@ Test first & last arr1 same arr2
 if(num_array1.length>=2 && num_array2.length>=2)
  {
	  System.out.println(num_array1[0] == num_array2[0] || num_array1[num_array1.length-1] == num_array2[num_array2.length-1]);
  }
  else
  {
   System.out.println("Array lengths less than 2.");
  }
  
@ len 2, 1st ele from arr1, last ele from arr2
- #Arrays.toString(arrName); //to print array in [,,] format
int[] array_new = {array1[0], array2[2]}

@ rotate in left direction
- [20,30,40] -> [30,40,20]
int[] newArr = {oriArr[1], oriArr[2], oriArr[0]};

@ larger val between first & last
- set max = first; then compare if last>first, max = last
- mid val = arr[arr.length/2]
int max_val = array_nums[0];
	if(array_nums[2] >= max_val)
		max_val = array_nums[2];

@ multiply corresponding elements of 2 arrays of int
			for (int i = 0; i < left_array.length; i++) {
				int num1 = left_array[i];
				int num2 = right_array[i];
				result += Integer.toString(num1 * num2) + " "; 
			}

@ contains 10 next to 10 or 20 next to 20, but not both
for(int i = 0; i < nums.length - 1; i++) {
        if(nums[i] == 10 && nums[i+1] == 10)
            found1010 = true;
                        
        if(nums[i] == 20 && nums[i+1] == 20)
            found2020 = true;
 }
 System.out.printf( String.valueOf(found1010 != found2020));	

@ rearrange odd b4 even
while(i < array_nums.length && array_nums[i] % 2 == 0)		//If is even
        i++;							//move to next
              
    for(int j = i + 1; j < array_nums.length; j++) {		//for the element need
        if(array_nums[j] % 2 != 0) {
            int temp = array_nums[i];
            array_nums[i] = array_nums[j];
            array_nums[j] = temp;
            i++;
        }
    }           

@ array size n with 0 to n-1 string values
String[] arr_string = new String[n];
	
    for(int i = 0; i < n; i++)
        arr_string[i] = String.valueOf(i); 

@ check have x, then y later
 for(int i = 0; i < array_nums.length; i++) {
        if(array_nums[i] == x)
            testd = true;
                    
        if(testd && array_nums[i] == y)
		{
         System.out.printf( String.valueOf(true));	
         result = 1		 ;
		}
    }

@ check contains a specified num next to each other or same specified num separated by one ele
for(int i = 0; i < array_nums.length - 1; i++) {
        if(array_nums[i] == x && array_nums[i+1] == x)
            {
         System.out.printf( String.valueOf(true));	
         result = 1 ;
		}
                  
        if(i <= array_nums.length - 3 && array_nums[i] == x && array_nums[i+2] == x)
           {
         System.out.printf( String.valueOf(true));	
         result = 1 ;
		}
    } //result = 0 print false
    
@ check 20 appears 3 time, no 20's next to each other
if(array_nums.length >= 1 && array_nums[0] == 20)		//if appear at first index, count+1
        count++;

    for(int i = 1; i < array_nums.length; i++) {		//for loop start at index 1
        if(array_nums[i - 1] == 20 && array_nums[i] == 20)	//if this and next before is 20, then false
		{
         System.out.printf( String.valueOf(false));	
         result = 1;						//skip the if loop for count = 3
		}                   
        if(array_nums[i] == 20)					//if this is 20, but next before not 20, then count+1
            count++;
    }
    if (result==0)						//only after check no 20 next to 20
 	  {
     	 System.out.printf( String.valueOf(count == 3));	         
	  }	
	  System.out.printf("\n");	
    }

*@ check a specified num appears in every pair of adjacent element
boolean result = true;
for(int i = 0; i < array_nums.length - 1; i++) {
   if(array_nums[i] != x && array_nums[i + 1] != x) //#If this not x, and next not x
   {
         result = false;
   }
}

@ count no. of corresponding element of 2 arr differ <=1
for(int i = 0; i < array_nums1.length; i++) {			
        if(Math.abs(array_nums1[i] - array_nums2[i]) <= 1 && array_nums1[i] != array_nums2[i])	//differ<=1 and not same
            ctr++;
    }

@ to print BOOLEAN value: System.out.printf(String.valueOf(booleanCompare));

@ check contains either 10 or 30
for(int i = 0; i < array_nums.length; i++)
     {
      	if(array_nums[i] == 10 || array_nums[i] == 30)
		{	
  		
		   result =0;
		}
      }
	 if (result==1)
 	   System.out.printf( String.valueOf(false));	         
     else
	   System.out.printf(String.valueOf(true));
  }

@ newArr have ele after last 10 in oriArr
int l = array_nums.length - 1;
int[] new_array;
while(array_nums[l] != 10)				//check from behind, where 10 exist is last index
	l--;
new_array = new int[array_nums.length - 1 - l];	
for(int i = l + 1; i < array_nums.length; i++)		//start copy  after the lastindex
	new_array[i - l - 1] = array_nums[i];		// i - l - 1 = 0

@ newArr have ele before last 10 in oriArr //change all arr.length-1 to 0
int l = 0;
	int[] new_array;
	while(array_nums[l] != 10)
	  l++;
	new_array = new int[l];
	for(int i = 0; i < l; i++)
		new_array[i] = array_nums[i];

@ check a grp of num at start & end of arr same
for(int l = 2; l > 0; l--)
	{
		if(array_nums[0] != array_nums[array_nums.length-1])
			result = 1;					//1 false; 0 true
		else
		{
			start++;
			end++;
		}
	}


<Calculation>
@ hexagonArea
- Math.tan; Math.PI
//Area of a hexagon = (6 * s^2)/(4*tan(π/6))
(6*(s*s))/(4*Math.tan(Math.PI/6)

@ polygonArea
//Area of a polygon = (n*s^2)/(4*tan(π/n))
(ns * (side * side)) / (4.0 * Math.tan((Math.PI / ns))

@ Distance between 2 points on earth surface
- Math.toRadians
convert lat1, lon1, lat2, lon2 to radians
earthRadius = 6371.01; //km
// d = radius * arccos(sin(x1) * sin(x2) + cos(x1) * cos(x2) * cos(y1 - y2))
earthRadius * Math.acos(Math.sin(lat1)*Math.sin(lat2) + Math.cos(lat1)*Math.cos(lat2)*Math.cos(lon1 - lon2)) //d = radius * arccos(sin(x1) * sin(x2) + cos(x1) * cos(x2) * cos(y1 - y2))

@ 
- repeat process until n = 1: while(n != 1)



<Number System>
@ convert DEC to BI
- %2 store in arr, divide 2, loop till = 0, print arr from last ele to first ele
int bin_num[] = new int[100];
quot = dec_num;
		
        while(quot != 0)
        {
            bin_num[i++] = quot%2;
            quot = quot/2;
        }

@ convert BI to DEC
- %10, multiply j add to dN, j*2, bN/10
long binaryNumber, decimalNumber = 0, j = 1, remainder;
while (binaryNumber != 0) 
  {
   remainder = binaryNumber % 10;
   decimalNumber = decimalNumber + remainder * j;
   j = j * 2;
   binaryNumber = binaryNumber / 10;
  }

@ convert BI to HEX
- convert BI to DEC, convert DEC to HEX
int[] hex = new int[1000];
int i = 1, j = 0, rem, dec = 0, bin;
while (bin > 0) {
   rem = bin % 2;
   dec = dec + rem * i;
   i = i * 2;
   bin = bin / 10;
  }
   i = 0;
  while (dec != 0) {
   hex[i] = dec % 16;
   dec = dec / 16;
   i++;
  }

@ convert BI to OCT
convert BI to DEC, convert DEC to OCT
 int binnum, binnum1,rem, decnum=0, quot, i=1, j;
 int octnum[] = new int[100];   //Print from last element to first element (j=i-1; j>0; j--)
 while(binnum > 0)
        {
            rem = binnum % 10;
            decnum = decnum + rem*i;
            //System.out.println(rem);
            i = i*2;
            binnum = binnum/10;
        }   

		i=1;
        quot = decnum;
		
        while(quot > 0)
        {
            octnum[i++] = quot % 8;
            quot = quot / 8;
        }        
        
@ convert DEC to HEX
char hex[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
while(dec_num>0)
        {
            rem = dec_num%16;
            hexdec_num = hex[rem] + hexdec_num;
            dec_num = dec_num/16;
        }
        
@ convert DEC to OCT
- %8 store in arr, divide 8, loop till = 0, print arr from last ele to first ele 
quot = dec_num;
		
        while(quot != 0)
        {
            oct_num[i++] = quot%8;
            quot = quot/8;
        }

@ convert OCT to DEC
while (octal_num != 0) 
     {
      decimal_num = (long)(decimal_num + (octal_num % 10) * Math.pow(8, i++));
      octal_num = octal_num / 10;
     }

@ convert OCT to BI
- %10, binaryNum += rem [as index * place (*1000 each loop) ]
int[] octal_numvalues = {0, 1, 10, 11, 100, 101, 110, 111}; //#
  long octal_num, tempoctal_num, binary_num, place;
  int rem;
  tempoctal_num = octal_num;
  binary_num = 0;
  place = 1;
  while (tempoctal_num != 0)
  {
   rem = (int)(tempoctal_num % 10);
   binary_num = octal_numvalues[rem] * place + binary_num; //#
   tempoctal_num /= 10;
   place *= 1000;
  }
  
@ convert OCT to HEX
decnum = Integer.parseInt(octal_num, 8);
hex_num = Integer.toHexString(decnum);

@ convert HEX to DEC
 public static int hex_to_decimal(String s)
    {
             String digits = "0123456789ABCDEF";
             s = s.toUpperCase();
             int val = 0;
             for (int i = 0; i < s.length(); i++)
             {
                 char c = s.charAt(i);
                 int d = digits.indexOf(c);
                 val = 16*val + d;
             }
             return val;
    }
  
@ convert HEX to BI
- convert HEX to DEC, convert DEC to BI

@ convert HEX to OCT
- convert HEX to DEC, convert DEC to OCT






<System>
@ Check JAVA installed
-# System.getProperty("");
    System.out.println("\nJava Version: "+System.getProperty("java.version"));
    System.out.println("Java Runtime Version: "+System.getProperty("java.runtime.version"));
    System.out.println("Java Home: "+System.getProperty("java.home"));
    System.out.println("Java Vendor: "+System.getProperty("java.vendor"));
    System.out.println("Java Vendor URL: "+System.getProperty("java.vendor.url"));
    System.out.println("Java Class Path: "+System.getProperty("java.class.path")+"\n");

@ 
get current system environment: System.out.println(System.getenv());
get current system properties: System.out.println(System.getProperties());

@ check whether a security manager has already been established for the current application or not
System.out.println(System.getSecurityManager());

@ get value of (specified) environment variable PATH, TEMP, USERNAME
System.out.println(System.getenv("PATH"));
System.out.println(System.getenv("TEMP"));
System.out.println(System.getenv("USERNAME"));

<>
@ fileSize
- # new File(fileName).length() //in bytes
- byte(1), kilobyte (1000), megabytes (1,000,000), gigabyte (1,000,000,000), terabyte (1,000,000,000,000)
new File("abc.txt").length() + " bytes"

@ display system time
System.out.format("\nCurrent Date time: %tc%n\n", System.currentTimeMillis());

@ display current date time
SimpleDateFormat cdt = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS");
		cdt.setCalendar(Calendar.getInstance(TimeZone.getTimeZone("GMT")));
		
		System.out.println("\nNow: "+cdt.format(System.currentTimeMillis()));

@ Measure how long some code takes to execute in nanoseconds
long startTime = System.nanoTime(); 
/*Block of code of program*/
long estimatedTime = System.nanoTime() - startTime;


@ Input & Display Password
-# cons.readPassword("");
		Console cons;											//create object
		if ((cons = System.console()) != null) {							//not empty
			char[] pass_ward = null;								//create array to store
			try {
				pass_ward = cons.readPassword("Input your Password:");				//Read: cons.readPassword("");
				System.out.println("Your password was: " + new String(pass_ward));		//Print: new String(charArr)
			} finally {
				if (pass_ward != null) {							//if charArr not empty
					java.util.Arrays.fill(pass_ward, ' ');					//fill entire pass_ward array with ' ' according to the size set in try{}
				}
			}
		} else {
			throw new RuntimeException("Can't get password...No console");
		}
	}




