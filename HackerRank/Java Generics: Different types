
import java.io.IOException;
import java.lang.reflect.Method;

class Printer
{

// To create an instance of generic class : BaseType <Type> obj = new BaseType <Type>()
/*
T – Type
E – Element
K – Key
N – Number
V – Value
*/

    static <T> void printArray(T[] t) {
    for (T t1 : t)
        System.out.println(t1);
    }
}

public class Solution {


    public static void main( String args[] ) {
        //Create object
        Printer myPrinter = new Printer();
        
        //Initialize array
        Integer[] intArray = { 1, 2, 3 };
        String[] stringArray = {"Hello", "World"};
        
        //Call printArray method from class Printer
        myPrinter.printArray(intArray);
        myPrinter.printArray(stringArray);
        
        
        //To check for method overloading (not allowed)
        int count = 0;

        for (Method method : Printer.class.getDeclaredMethods()) {
            String name = method.getName();

            if(name.equals("printArray"))
                count++;
        }

        if(count > 1)System.out.println("Method overloading is not allowed!");
      
    }
}
