@contains a 2 next to 2
for(int i = 0; i<nums.length-1; i++){
if(nums[i] == 2 && nums[i+1] == 2){
      return true;
    }

@fizzArray: 
- new int [desired_length]
e.g. fizzArray(4) → [0, 1, 2, 3]

int [] arr = new int [n];
  for(int i = 0; i<n; i++){
    arr[i] = i;
  }

- new String[desired_length]
e.g. fizzArray(4) -> ["0", "1", "2", "3"]
    for (int i = 0; i < n; i++)
        result[i] = String.valueOf(i);      //#Convert int to string: String.valueOf(i)

  
@ element only 1 or 4
if(!(nums[i]==1 || nums[i]==4)){return false;}

@ a true or b true, cannot both
if(condA){a = true;}
if(condB){b = true;}
if((condA && !condB) || (!condA && condB)) {return true;}
return false;

@element in 2 arrays with same index differ by at most 2 but not equal
int diff = Math.abs(nums1[i] - nums2[i]);
    if(diff<=2 && diff!=0){count++;}

@contains two 7's next to each other, or there are two 7's separated by one element
for(int i = 0; i<nums.length-2; i++){
   if((nums[i] == 7 && nums[i+1]==7) || (nums[i] == 7 && nums[i+2]==7) || (nums[i+1] == 7 && nums[i+2]==7) ){
   return true;
   }
 }
 
@ if there is a 1 in the array with a 2 somewhere later in the array.
if(nums[i]==1){foundOne = true;}
if(foundOne && nums[i] ==2){return true;}

@ contains either 3 even or 3 odd values all next to each other.
for (int i = 0; i<nums.length-2; i++){
    if(nums[i]%2==0 && nums[i+1]%2==0 && nums[i+2]%2==0){countEven = true;}
    else if(nums[i]%2!=0 && nums[i+1]%2!=0 && nums[i+2]%2!=0){countOdd = true;}
}
  return (countEven || countOdd);

[r]
@To not add 13 and the num next to it
 if(nums[i]==13){
      i++;
    }else{
      sum+=nums[i];
    }
    
 @  return true if it contains no 1's or it contains no 4's
//# Set find each as if condition, if(true&&true){false}
public boolean no14(int[] nums) {
boolean two = false,four = false;
for(int count = 0;count <nums.length; count++) {
if (nums[count] == 1)
two = true;
if(nums[count] == 4)
four = true;
 }
if(nums.length == 0 || nums.length == 1)
return true;
else if (two ==true && four ==true)
 return false;
else if (two || four)
return true;
else
return false; }

@ Return true if the group of N numbers at the start and end of the array are the same.
- e.g. 
sameEnds([5, 6, 45, 99, 13, 5, 6], 1) → false
sameEnds([5, 6, 45, 99, 13, 5, 6], 2) → true
sameEnds([5, 6, 45, 99, 13, 5, 6], 3) → false

boolean foundSame = true;                                                        // Initialize a boolean: TRUE
  for(int i = 0; i<len; i++) {
  //element with same index counting at behind to compare: nums [nums.length-len+i]
    if(nums[i] == nums [nums.length-len+i]){foundSame = true;}                   // as the i need to continue increase to compare, we don't directly return true
    else{foundSame = false;}
}
  return foundSame;

@
This is slightly more difficult version of the famous FizzBuzz problem which is sometimes given as a first problem for job interviews. (See also: FizzBuzz Code.) Consider the series of numbers beginning at start and running up to but not including end, so for example start=1 and end=5 gives the series 1, 2, 3, 4. Return a new String[] array containing the string form of these numbers, except for multiples of 3, use "Fizz" instead of the number, for multiples of 5 use "Buzz", and for multiples of both 3 and 5 use "FizzBuzz". In Java, String.valueOf(xxx) will make the String form of an int or other type. This version is a little more complicated than the usual version since you have to allocate and index into an array instead of just printing, and we vary the start/end instead of just always doing 1..100.
fizzBuzz(1, 6) → ["1", "2", "Fizz", "4", "Buzz"]
fizzBuzz(1, 8) → ["1", "2", "Fizz", "4", "Buzz", "Fizz", "7"]
fizzBuzz(1, 11) → ["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz"]
---------------------------------------------------
public String[] fizzBuzz(int start, int end) {
  String[] fb = new String[end-start];
  
  int index = 0;                              // index initialize
  for(int i = start; i < end; i++){         // i = start ~ end
    boolean fizz = i%3 == 0;
    boolean buzz = i%5 == 0;
    
    if(fizz & buzz){fb[index] = "FizzBuzz";}        //divisible 3&5 : FizzBuzz
    else if (fizz){fb[index] = "Fizz";}             //divisible 3: Fizz;
    else if (buzz){fb[index] = "Buzz";}             //divisible 5: Buzz;
    else{fb[index] = String.valueOf(i);}            //convert int i to String: String.valueOf(i);
    index++;                                        //increase index manually
  }
  return fb;
}

@ withoutTen([1, 10, 10, 2]) → [1, 2, 0, 0]
int[] arr = new int [nums.length];                    //Create new array
  int indexArr = 0;                                   //Initialize new array index outside
  for(int i = 0; i<nums.length; i++){
    if(nums[i]==10){}                                 //if is 10, do nothing
    else{                                             //if not 10, add to new array; increase new array index by 1
      arr[indexArr] = nums[i];
      indexArr++;
    }
  }
  for(int i = indexArr; i<nums.length; i++){          //the rest of size new array, start from the next last index of above loop, set as 0
    arr[i] = 0;
  }
  return arr;

@ all the even numbers come before all the odd numbers
  int [] sorted = new int [ nums.length ];
  int index = 0;
  for(int i = 0; i<nums.length; i++){                             //if is even, add to sorted first
    if(nums[i]%2 == 0){sorted[index] = nums[i]; index++;}
  }
  for(int i = 0; i<nums.length; i++){                             //if is odd, add to sorted later
    if(nums[i]%2 != 0){sorted[index] = nums[i];index++;}          
  }
  return sorted;
OR

public int[] evenOdd(int[] nums) {
  int countE = 0;
  int countO = nums.length-1;
  int[] array = new int[nums.length];
  
  for (int i = 0; i < nums.length; i++) {
    if (nums[i] % 2 == 0) {
      array[countE] = nums[i];
      countE++;
    } 
    else {
      array[countO] = nums[i];
      countO--;
    }
  }
  return array;
}



[R]
@
Return the "centered" average of an array of ints, which we'll say is the mean average of the values, except 
//ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array is length 3 or more.

centeredAverage([1, 2, 3, 4, 100]) → 3
centeredAverage([1, 1, 5, 5, 10, 8, 7]) → 5
centeredAverage([-10, -4, -2, -4, -2, 0]) → -3

public int centeredAverage(int[] nums) {
  //Initialize min & max as first element
  int min = nums[0];
  int max = nums[0];
  int sum = 0;
  
  for(int i=0; i<nums.length; i++){
    sum+=nums[i];                     //Add all element
    min = Math.min(min, nums[i]);     //Compare >> find min
    max = Math.max(max, nums[i]);     //Compare >> find max
  }
  
  sum = sum - max - min;              //sum include largest & smallest
  int avg = sum/(nums.length-2);      //find average of remaining sum of remaining elements
  return avg;
}

@ 
We'll say that a value is "everywhere" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.

isEverywhere([1, 2, 1, 3], 1) → true
isEverywhere([1, 2, 1, 3], 2) → false
isEverywhere([1, 2, 1, 3, 4], 1) → false

public boolean isEverywhere(int[] nums, int val) {
boolean result = true;
for (int i = 0; i <=nums.length-2;i++)
{
if ( nums[i] != val && nums[i+1] != val)
result = false;
}
  return result;
}

@ ELEMENT X TGT
Given an array of ints, return true if the value 3 appears in the array exactly 3 times, and no 3's are next to each other.
haveThree([3, 1, 3, 1, 3]) → true
haveThree([3, 1, 3, 3]) → false
haveThree([3, 4, 3, 3, 4]) → false
-------------------------------------------------------------------------------------------------------------------------------

public boolean haveThree(int[] nums) {
  int count = 0;
  boolean found = false;                                               #not found -> Initialize: found = false
  
  for (int i = 0; i < nums.length; i++) {
    if (nums[i] != 3)
      found = false;                                                    #this not 3 -> found = false (Reset every time when move to next element)
    if (nums[i] == 3 && found == true)
      return false;                                                     #this is 3 && found == true (Before this is also 3) -> return false
    if (nums[i] == 3 && found == false) {
      found = true;                                                     #this is 3 -> found = true (so if next is 3 then return false); this is 3 && found == false (before this is not 3) -> count+1
      count++;
    }
  }
  if (count == 3)
    return true;
  else
   return false;
}

@ ELEMENT MUST TGT
Given an array of ints, return true if every 2 that appears in the array is next to another 2.

twoTwo([4, 2, 2, 3]) → true
twoTwo([2, 2, 4]) → true
twoTwo([2, 2, 4, 2]) → false

public boolean twoTwo(int[] nums) {
  boolean isTrue = false;
  
  for (int i = 0; i < nums.length; i++) {
    if (nums[i] == 2) {                                                          #Found 2; nums.length > 1                  
      if (nums.length > 1 && i < nums.length-1 && nums[i+1] == 2)                # This 2 not the last element, right next to it is 2 also -> True               
        isTrue = true;
      else if (nums.length > 1 && i > 0 && nums[i-1] == 2)                       # This 2 not the first element, right before it is 2 also -> True
        isTrue = true;
      else
        return false;
    }  
  }
  return true;
}

@
Return true if the array contains, somewhere, three increasing adjacent numbers like .... 4, 5, 6, ... or 23, 24, 25.
tripleUp([1, 4, 5, 6, 2]) → true
tripleUp([1, 2, 3]) → true
tripleUp([1, 2, 4]) → false

public boolean tripleUp(int[] nums) {
  boolean foo = false;
  int count = 0;
  
  for (int i = 0; i < nums.length; i++) {
    if (i < nums.length-1) {
      int sum = nums[i+1] - nums[i];
      if (sum == 1)
        count++;
      else
        count = 0;
    }
    if (count == 2)
      foo = true;
  }
  return foo;
}

@ 0 replaced by largest ODD number to right, else remains
public int[] zeroMax(int[] nums) {
  int max = 0;
  for(int i = nums.length-1; i>=0; i--){              //#access backwards
    if(nums[i]%2 != 0){max = Math.max(max,nums[i]);} //if is ODD, compare with max
    if(nums[i]==0){nums[i] = max;}                    //replace with max ODD(max til this point), as accessing from backwards, it is to the next of this point
  }
  return nums;
}

@ Left shifted by one ((e.g.: shiftLeft([6, 2, 5, 3]) → [2, 5, 3, 6]

public int[] shiftLeft(int[] nums) {
  int[] shifted = new int [nums.length];
  
  if(nums.length == 0){return shifted;}       //nums no ele, return empty arr
  
  for(int i = 0; i<nums.length-1; i++){       //not last & not first shifted = index+1 of nums ele
    if(i>0){shifted[i] = nums[i+1];}
  }
  
  if(nums.length>1){shifted[0] = nums[1];}    //nums >1 ele: 1st shifted = nums last
  shifted[nums.length-1] = nums[0];           //last shifted = nums first
  return shifted;
}

@
For each multiple of 10 in the given array, change all the values following it to be that multiple of 10, until encountering another multiple of 10. So {2, 10, 3, 4, 20, 5} yields {2, 10, 10, 10, 20, 20}
tenRun([2, 10, 3, 4, 20, 5]) → [2, 10, 10, 10, 20, 20]
tenRun([10, 1, 20, 2]) → [10, 10, 20, 20]
tenRun([10, 1, 9, 20]) → [10, 10, 10, 20]

public int[] tenRun(int[] nums) {
  boolean ten = false;                //not found 10
  int tmp = 0;
  
  for(int i = 0; i<nums.length; i++){
    if(nums[i]%10==0){                //if found 10
      tmp = nums[i];                  //tmp store the value of multiple of 10
      ten = true;                     //found 10
    } 
    else if(nums[i]%10 != 0 && ten){  //not multiple of 10 and ten is found
      nums[i] = tmp;                  //change this value to the tmp (multiple of 10 that found before this)
    }
  }
  return nums;
}

@
Given a non-empty array of ints, return a new array containing the elements from the original array that come after the last 4 in the original array. The original array will contain at least one 4. Note that it is valid in java to create an array of length 0.
post4([2, 4, 1, 2]) → [1, 2]
post4([4, 1, 4, 2]) → [2]

public int[] post4(int[] nums) {
  for(int i = nums.length-1; i>=0; i--){
    if(nums[i] == 4){                           //if found 4
      int[] post4 = new int [nums.length-i-1];  //create new arr: #length = nums.length - 1 -i
      
      for(int j = 0; j<post4.length; j++){      //to loop through all index of new arr to add element
        post4[j] = nums[i+j+1];                 //# i:index4 |j:length needed to increase index4 to next index |+1:start from next of index4
      }
      return post4;
    }
  }
  
  int[] bar = new int[0];                       //if not found, create new arr of size 0
  return bar;
}

@ 
element alone if have diff values before & after it, this element replaced by left or right which is greater

public int[] notAlone(int[] nums, int val) {
  for(int i = 0; i < nums.length; i++){
    if(i>0 && i<nums.length-1 && nums[i] == val){         //if not first ele, not last ele, equals to val
      if(nums[i] != nums[i-1] && nums[i] != nums[i+1]){   //if val not same with ele before & ele after;
        nums[i] = Math.max(nums[i-1], nums[i+1]);         //this will follow before ele or after ele that is greater
      }
    }
  }
  return nums;
}

@ all the zeros are grouped at the start of the array. The order of the non-zero numbers does not matter.

public int[] zeroFront(int[] nums){
  int count = 0;                            //initialize index outside, is to count how many 0 has been find(should put the next 0 at what index)
  for(int i = 0; i < nums.length; i++){     
    if(nums[i] == 0){                       //if found 0 behind
      nums[i] = nums[count];                //behind will get the value of the front (to be replaced)
      nums[count] = 0;                      //front become 0
      count++;                              //increase count by 1 when found 0
    }
  }
  return nums;
}

@
Return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.
sum67([1, 2, 2]) → 5
sum67([1, 2, 2, 6, 99, 99, 7]) → 5
sum67([1, 1, 6, 7, 2]) → 4
--------------------------------------
public int sum67(int[] nums) {
  int sum = 0;
  boolean stop = false;
  
  for (int i = 0; i < nums.length; i++) {       //loop through all ele
    if (nums[i] == 6)                           //found 6, stop = true;
      stop = true;
    if (stop == false)                          //stop = false; continue adding each ele to sum
      sum += nums[i];
    if (nums[i] == 7 && stop == true)           //found 7 & stop = true (as found 6 before)>> stop = false >> continue adding each ele to sum
      stop = false;
  }
  return sum;
}
