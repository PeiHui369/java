01_Binary Search
 static int binarySearch(int[] nums, int find) {
            int high = nums.length;
            int low = 0;
            if(high>=low) {
                int mid = (high + low)/2;
                if(nums[mid]>find) {
                low = mid+1;
                }else if(nums[mid]<find) {
                    high = mid - 1;
                }else {
                    return mid;
                }
            }
            return -1;
        }

02_Linear Search
 static int linearSearch (int[]nums, int find){
        for(int i = 0; i<nums.length; i++){
            if(nums[i]==find){
                return i;
            }
        }
        return -1;
    }

03_Jump Search
 public static int jumpSearch(int[] nums, int item) {
    int arraySize = nums.length;
    int blockSize = (int)Math.floor(Math.sqrt(arraySize));
    int prevItem = 0;

    while(nums[Math.min(blockSize,arraySize-1)]<item){
        prevItem = blockSize;
        blockSize += (int)Math.floor(Math.sqrt(arraySize));
        if(prevItem > arraySize){return -1;}
    }
    
    while(nums[prevItem]<item){
        prevItem++;
        if(prevItem > Math.min(blockSize,arraySize)){return -1;}
    }

    if(nums[prevItem]==item){return prevItem;}
        return -1;
    }
    
07_2dArraySearch
static int [] Saddleback(int[][] nums, int row, int col, int toFind) {
        int position[] = {-1, -1};

        //outOfBound >> notFound >> -1
        if (row < 0 || col >= nums[row].length) {
            return position;
        } //as row always move up, so outOfBound if <0; col always move right, increase, so outOfBound if larger than row length

        //if not this, try next
        if(nums[row][col] < toFind){
            //toFind bigger, so go to right
            return Saddleback(nums, row, col + 1, toFind);
        }else if(nums[row][col]>toFind){
            //toFind smaller, so go up (first ele in each row is the smallest in each row;)
            return Saddleback(nums, row-1, col, toFind);
        }else{
                position[0] = row;
                position[1] = col;
                return position;
        }
    }
