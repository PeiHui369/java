/*
tag-based language (XML or HTML):
<tag> contents </tag>
- both start & end tags must be same
- tags can be nested, content between nested tags invalid
- tags can consist of any printable characters

 Pattern pattern = Pattern.compile("<(.+)>([^<>]+)</\\1>"); //###
 for (int i = 0; i < testCases; i++) {
    boolean matched = false;
    String string = in.nextLine();
    Matcher matcher = pattern.matcher(string);              //###
    while (matcher.find()) {
          System.out.println(matcher.group(2));             // This method takes a parameter group which is the group from which the group index of the matched pattern is required.
                matched = true;
    }
    if (!matched) {
         System.out.println("None");
    }
                   
*/


import javax.swing.text.StyledEditorKit;
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    public static void main(String[] args) {

        Scanner in = new Scanner(System.in);
        int testCases = Integer.parseInt(in.nextLine());
        Pattern pattern = Pattern.compile("<(.+)>([^<>]+)</\\1>");  #
        for (int i = 0; i < testCases; i++) {
            boolean matched = false;
            String string = in.nextLine();
            Matcher matcher = pattern.matcher(string);
            while (matcher.find()) {
                System.out.println(matcher.group(2));
                matched = true;
            }
            if (!matched) {
                System.out.println("None");
            }
        }
    }
}
