@ To print string multiple times (with return)
String result = "";                               //create empty str var
  for (int i=0; i<n; i++) {
    result = result + str;  // could use += here  //add the str to var
  }             
  return result;                                  //print var
}

@Length
String.length()
Array.length

@Equals
str.equals(str2)
str.charAt(i) == 'x'
a == 1

@To count xx (xxx contains 2 xx)
  for (int i = 0; i < str.length()-1; i++) {        //To pull out length 2 substring without outOfBound error
if (str.substring(i, i+2).equals("xx")) count++;}

@ FIRST OCCURENCE : str.indexOf()
returns the position of the first occurrence of specified character(s) in a string.
- str.indexOf('char', startSearchPosition);
- -1 if not found

@ Find 2 same tgt
int i = str.indexOf("x");
  if (i == -1) return false;                  // no "x" at all
  if (i+1 >= str.length()) return false;      // check i+1 in bounds
return str.substring(i+1, i+2).equals("x");

@
startsWith() method checks whether a string starts with the specified character(s).
endsWith() method to check whether a string ends with the specified character(s).

@ Find 2 char tgt: if(str.length()<2){return false;}

@ return a new string made of every other char starting with the first
Take 1 skip 1: for(int i = 0; i<str.length() ;i+=2)

@  str.charAt(i) SAME AS str.substring(i, i+1)

@ To print str: abc >> aababc
for(int i = 0; i<str.length(); i++){
    result += str.substring(0,i+1);
    
?@ count of the number of times that a substring length 2 appears in the string and also as the last 2 chars of the string (count exclude the last 2 chars)
public int last2(String str) {
  // Screen out too-short string case.
  if (str.length() < 2) return 0;
  
  String end = str.substring(str.length()-2);
  // Note: substring() with 1 value goes through the end of the string
  int count = 0;
  
  // Check each substring length 2 starting at i
  for (int i=0; i<str.length()-2; i++) {
    String sub = str.substring(i, i+2);                           //#To get substring length 2 at diff index
    if (sub.equals(end)) {  // Use .equals() with strings
      count++;
    }
  }

  return count;
}

@ sequence of numbers 1, 2, 3 appears in array
for (int i=0; i < (nums.length-2); i++) {
    if (nums[i]==1 && nums[i+1]==2 && nums[i+2]==3) return true;
  }
  
?@ return the number of the positions where they contain the same length 2 substring
- e.g. : "xxcaazz" and "xxbaaz" yields 3, since the "xx", "aa", and "az" substrings appear in the same place in both strings.
public int stringMatch(String a, String b) {
  // Figure which string is shorter.
  int len = Math.min(a.length(), b.length());
  int count = 0;
  
  // Look at both substrings starting at i
  for (int i=0; i<len-1; i++) {                               //use the shortest length of string
    String aSub = a.substring(i, i+2);                        //#trim both string substr into parts length of 2
    String bSub = b.substring(i, i+2);
    if (aSub.equals(bSub)) {                                  //#Use .equals() with strings
      count++;
    }
  }

  return count;
}

?@  all the "x" have been removed, except at very start or end
- e.g.: stringX("xxHxix") â†’ "xHix"
public String stringX(String str) {
  String result = "";                                                                     
  for (int i=0; i<str.length(); i++) {
    
     //#Only append the char if it is not the "x" case
    if (!(i > 0 && i < (str.length()-1) && str.substring(i, i+1).equals("x"))) {
      result = result + str.substring(i, i+1);                                          // Could use str.charAt(i) here
      
    }
  }
  return result;
}

?@ all the "yak" are removed ("a" can be any char)
public String stringYak(String str) {
  String result = "";
  
  for (int i=0; i<str.length(); i++) {
    // Look for i starting a "yak" -- advance i in that case
    
    if (i+2<str.length() && str.charAt(i)=='y' && str.charAt(i+2)=='k') {   //#not exceed string, this char is y, next 2 char is k, skip
      i =  i + 2;
      
    } else { // Otherwise do the normal append
      result = result + str.charAt(i);
    }
  }
  
  return result;
}

@To compare if 3 nums same, assign 1 as var, if(num2 == var && num3 == var)

?@return true if it contains a 2, 7, 1 pattern: a value, followed by the value plus 5, followed by the value minus 1. Additionally the 271 counts even if the "1" differs by 2 or less from the correct value.
public boolean has271(int[] nums) {
  // Iterate < length-2, so can use i+1 and i+2 in the loop.
  // Return true immediately when seeing 271.
  for (int i=0; i < (nums.length-2); i++) {
    int val = nums[i];
    if (nums[i+1] == (val+5) &&              // the "7" check
      Math.abs(nums[i+2] - (val-1)) <= 2) {  // the "1" check
        return true;
    }
  }
  
  // If we get here ... none found.
  return false;
}

?@ Given a string, return a string made of the chars at indexes 0,1, 4,5, 8,9 ... so "kittens" yields "kien".

public String altPairs(String str) {
  String result = "";
  
  // Run i by 4 to hit 0, 4, 8, ...
  for (int i=0; i<str.length(); i += 4) {
    // Append the chars between i and i+2
    int end = i + 2;
    if (end > str.length()) {
      end = str.length();
    }
    result = result + str.substring(i, end);
  }
  
  return result;
}




