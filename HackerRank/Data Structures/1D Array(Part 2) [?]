Standing at index 0 of an n-element array named game: game[0]

- Move backward
(i - 1)  contains a 0

- Move forward
(i + 1) contains a 0
(i + leap) contains a 0

- Walk/ Jump off the end of array & win
standing in cell (n-1), i+leap >= n

- can move from index i to index (i+1),(i-1),(i+leap) if destination index is cell containing a 0
- win game if destination index greater than n-1

queue.add(ele)
queue.isEmpty()
queue.poll() : returns and removes the element at the front end of the container

===
import java.util.*;

public class Solution {

    public static boolean canWin(int leap, int[] game) {
        // Return true if you can win the game; otherwise, return false.
        
         
        Queue<Integer> queue = new LinkedList<>();
        queue.add(0);                                                                   //Standing at index 0
        while(!queue.isEmpty()) {                                                       //while queue has element
            int curr = queue.poll();                                                    //current = front end
            if (curr < 0 || game[curr] == 1) continue;                                  // curr < 0 OR
            if (curr + leap >= game.length || curr + 1 >= game.length) return true;     // # win game if destination index greater than n-1
            game[curr] = 1;
            queue.add(curr - 1);
            queue.add(curr + 1);
            queue.add(curr + leap);
        }
        return false;
    
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int q = scan.nextInt();
        while (q-- > 0) {
            int n = scan.nextInt();
            int leap = scan.nextInt();
            
            int[] game = new int[n];
            for (int i = 0; i < n; i++) {
                game[i] = scan.nextInt();
            }

            System.out.println( (canWin(leap, game)) ? "YES" : "NO" );
        }
        scan.close();
    }
}
