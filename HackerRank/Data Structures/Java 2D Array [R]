- m * n 2D array
- hourglass: (if use 1, as long as have 1 in any position acceptable)
a b c
  d
e f g

====
sum of hourglass = sum of all numbers within it
Find largest sum of hourglass:
1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 2 4 4 0
0 0 0 2 0 0
0 0 1 2 4 0
----------------


import java.util.Scanner;


public class Intro2dArray {

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
    
    //Initialize multidimension array
		int multiDimArr[][] = new int[6][6];
    
    //Prompt input for value
		for(int row = 0; row < 6; row++){
			for(int col = 0; col < 6;col++){
				multiDimArr[row][col] = sc.nextInt();
			}
		}
		System.out.println(Solve(multiDimArr));
	}
  
  //
	static int Solve(int arr[][]){
  //Initialize
		int max = Integer.MIN_VALUE;
		int total = 0;
    
    //To loop through all element
		for(int row = 0; row < 4; row++){
			
			for(int col = 0; col < 4; col++ ){
				
        //[1] m11 + m12 + m13
				total = arr[row][col] + arr[row][col+1] + arr[row][col+2]; 
        //[2] + m22
				total += arr[row+1][col+1];
        //[3] + m31 + m32 + m33
				total += arr[row+2][col] + arr[row+2][col+1] + arr[row+2][col+2];
        //element included in calc will change as no. of row&col increase
        
        //If greater than max, then replace max
				max = total>max?total:max;
			}
		}
		return max;
		
	}

}

| m11 m12 m13 |
| m21 m22 m23 |
| m31 m32 m33 |
