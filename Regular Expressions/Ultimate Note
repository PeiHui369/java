> text.matches()
- ^[\\w]+$ : alphabets or num
- pq*? : p followed by 0 or more 1s
- "^[a-z]+_[a-z]+$": lowercase letters joined with underscore
- "[A-Z][a-z]+$" :1 uppercase followed by lowercase
- "p.*?q$": String has a 'p' followed by anything, end in 'q'

>
Pattern pattern = Pattern.compile(~);
Matcher m = pattern.matcher(text);
		if (m.find()){}
- Check if a word contains char 'g' in given string: "\\w*g.\\w*"
- Matches word containing 'g', not at start or end of word: "\\Bg\\B"
- string contains only upper & lowercase, num, underscores: "^[a-zA-Z0-9_]*$"
- String starts with a specific number: "^5.*$"
- Check number at end of string: ".*[0-9]$"

> Replace 
- Replace Word: str.replace("target1","replacement1").replace("target2","replacement2");//add on .replace(,) for following
- Remove leading zeros from IP address: str.replaceAll("(?<=^|\\.)0+(?!\\.|$)","");}
- Check if a word present: str.contains("python")) 
- Count no.of vowels: return text.replaceAll("[^aeiouAEIOU]", "").length();
- Remove all vowels: String result: text.replaceAll("(?i)[aeiou]", "");
- Replace vowels with specified char: text.replaceAll("[aeiouAEIOU]", "" + chr);
- Remove specific letter from str: String s = text.replaceAll("(?i)[pqr]", "");

> Count
- num of d.p.: 
if(n.contains("."))
	return n.replaceAll(".*\\.(?=\\d?)", "").length();
		return 0;
		
> no. of digits validity(PIN: 4, 6, 8)
name.matches("\\d{4}|\\d{6}|\\d{8}")

> set thousands separator
return(Integer.parseInt(num.substring(0, len-3))) + '#' + num.substring(len-3);} //.substring(beginIindex, endIndex)

> remove all non-alphanumeric characters
return text.replaceAll("(?i)[^A-Z]", "");

> validate phone number (follow rules)

> 
text1 = text.replaceAll("(?i)[^aeiou]", "");//get consonants, vowels become ""
text2 = text.replaceAll("(?i)[aeiou]", ""); //get vowels, consonant become ""
		
		
1. String contains alphabets or numbers

public static boolean validate(String text) {
    return text.matches("^[\\w]+$");
  }
  
  2. String foolwed by 0 abdn ire1

   public static String validate(String text) {
	   if (text.matches("pq*?"))
                return "Found a match!";
        else
                return "Not matched!";
   }

3. Sequences of lowercase letters joined with underscore
public static String validate(String text) {
	   if (text.matches("^[a-z]+_[a-z]+$"))
                return "Found a match!";
       else
                return "Not matched!";
   }
  
  4. Sequence of 1 uppercase letters followed by lowercase letters
   public static String validate(String text) {
	   if (text.matches("[A-Z][a-z]+$"))
                return "Found a match!";
       else
                return "Not matched!";
  }
  
  
  5. String has a 'p' followed by anything, end in 'q'
   public static String validate(String text) {
	   if (text.matches("p.*?q$"))
                return "Found a match!";
       else
                return "Not matched!";
   }
   
   6. Check word contains char 'g' in given string
    public static String validate(String text) {
	    Pattern pattern = Pattern.compile("\\w*g.\\w*");
		 Matcher m = pattern.matcher(text);
		
	   if (m.find())
                return "Found a match!";
       else
                return "Not matched!";
   }
   
   7. Matches word containing 'g', not at start or end of word
    public static String validate(String text) {
	    Pattern pattern = Pattern.compile("\\Bg\\B");
		 Matcher m = pattern.matcher(text);
		
	   if (m.find())
                return "Found a match!";
       else
                return "Not matched!";
   }
   
   8. string contains only upper & lowercase, num, underscores
    public static String validate(String text) {
	    Pattern pattern = Pattern.compile("^[a-zA-Z0-9_]*$");
		 Matcher m = pattern.matcher(text);
		
	   if (m.find())
                return "Found a match!";
       else
                return "Not matched!";
   }
   
   9. String starts with a specific number
   public static String validate(String text) {
	    Pattern pattern = Pattern.compile("^5.*$");
		 Matcher m = pattern.matcher(text);
		
	   if (m.find())
                return "Found a match!";
       else
                return "Not matched!";
   }
   
   10. Remove leading zeros from IP address
    public static String validate(String ip) {
          return ip.replaceAll("(?<=^|\\.)0+(?!\\.|$)","");
   }

   
   11. Check number at end of string
   public static String validate(String text) {
	    Pattern pattern = Pattern.compile(".*[0-9]$");
		Matcher m = pattern.matcher(text);
		
	    if (m.find())
            return "Found a match!";
        else
            return "Not matched!";
   }
   
   12. Replace words in string
   public static String validate(String text) {
	   return text.replace("Python", "Java").replace("code", "coding");
   }
   
   13. Check if a word present, replace it/ print another word:
   if (str.contains("python")) {
			return "Java";}

   14. Count no. of vowels:
   public static int validate(String text) {
	   return text.replaceAll("[^aeiouAEIOU]", "").length();
   }
   
   15. Remove all vowels
  public static String validate(String text) {
	   String result = text.replaceAll("(?i)[aeiou]", "");
	   return result;
	   }
	   
   18. no. of digits validity(PIN: 4, 6, 8)
   public static boolean validate(String n) {
	   return n.matches("\\d{4}|\\d{6}|\\d{8}");
   }
   
   
   19. Remove specific letter from str
   public static String validate(String text) {
	     	String s = text.replaceAll("(?i)[pqr]", "");
    return text.equals(s) ? "Not found." : s;
   }

   20. set thousands separator
   public static String validate(int n) {
		String num = Integer.toString(n);
		int len = num.length();
		if(len < 4) {
			return num;
		}
		//You can use any character as separator 
		return validate(Integer.parseInt(num.substring(0, len-3))) + '#' + num.substring(len-3);
   }

   21. remove non-alphanumeric char
   public static String validate(String text) {
        return text.replaceAll("(?i)[^A-Z]", "");
   }
   
   22. Validate a phone number follow given rules
    public static Boolean validate(String text) {
        return text.matches("\\d{10}|(?:\\d{3}-){2}\\d{4}|\\(\\d{3}\\)\\d{3}-?\\d{4}");
   }
   
Regex explanation:
^\\(? - May start with an option "("
(\\d{3}) - Followed by 3 digits
\\)? - May have an optional ")"
[- ]? - May have an optional "-" after the first 3 digits or after optional ) character
(\\d{3}) - Followed by 3 digits.
[- ]? - May have another optional "-" after numeric digits
(\\d{4})$ - ends with four digits

    23. Separate consonant & vowel
    public static String validate(String text) {
		String text1 = text.replaceAll("(?i)[^aeiou]", "");
		String text2 = text.replaceAll("(?i)[aeiou]", "");
		return text2 + text1;
   }
    
