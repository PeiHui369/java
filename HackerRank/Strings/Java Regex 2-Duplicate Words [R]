-  remove instances of words that are repeated more than once, but retain the first occurrence of any case-insensitive repeated word. 
RegEx match repeated word --> 2nd compile arg--> 2 necessary arg for replaceAll
i) Write a RegEx that will match any repeated word.
ii) Complete the second compile argument so that the compiled RegEx is case-insensitive.
iii) Write the two necessary arguments for replaceAll such that each repeated word is replaced with the very first instance the word found in the sentence. 
It must be the exact first occurrence of the word, as the expected output is case-sensitive.

 String regex = "\\b(\\w+)(?:\\W+\\1\\b)+" ;
 Pattern p = Pattern.compile(regex, Pattern.CASE_INSENSITIVE); #

        Scanner in = new Scanner(System.in);
        int numSentences = Integer.parseInt(in.nextLine());
        
        while (numSentences-- > 0) { #
            String input = in.nextLine();
            
            Matcher m = p.matcher(input);#
            
            // Check for subsequences of input that match the compiled pattern
            while (m.find()) { #
                input = input.replaceAll(m.group()/* The regex to replace */,m.group(1) /* The replacement. */); #
            }
            
            // Prints the modified sentence.
            System.out.println(input);
        }
        in.close();
    }
}

======================

import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class DuplicateWords {

    public static void main(String[] args) {

        String regex = "\\b(\\w+)(?:\\W+\\1\\b)+" /* Write a RegEx matching repeated words here. */;
        Pattern p = Pattern.compile(regex, Pattern.CASE_INSENSITIVE/* Insert the correct Pattern flag here.*/);

        Scanner in = new Scanner(System.in);
        int numSentences = Integer.parseInt(in.nextLine());
        
        while (numSentences-- > 0) {
            String input = in.nextLine();
            
            Matcher m = p.matcher(input);
            
            // Check for subsequences of input that match the compiled pattern
            
            while (m.find()) {
                input = input.replaceAll(m.group()/* The regex to replace */,m.group(1) /* The replacement. */);
            }
            
            // Prints the modified sentence.
            System.out.println(input);
        }
        
        in.close();
    }
}
