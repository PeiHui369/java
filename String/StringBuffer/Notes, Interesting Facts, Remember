/*
StringBuffer is a peer class of String that provides much of the functionality of strings. 
The string represents fixed-length, immutable character sequences while StringBuffer represents growable and writable character sequences. 
StringBuffer may have characters and substrings inserted in the middle or appended to the end. 
It will automatically grow to make room for such additions and often has more characters preallocated than are actually needed, to allow room for growth.

StringBuffer class is used to create mutable (modifiable) string. 
The StringBuffer class in java is same as String class except it is mutable i.e. it can be changed.

> Interesting Facts 

- java.lang.StringBuffer extends (or inherits from) Object class.
- All Implemented Interfaces of StringBuffer class: Serializable, Appendable, CharSequence.
- public final class StringBuffer extends Object implements Serializable, CharSequence, Appendable.
- String buffers are safe for use by multiple threads. 
The methods can be synchronized wherever necessary so that all the operations on any particular instance behave as if they occur in some serial order.
- Whenever an operation occurs involving a source sequence (such as appending or inserting from a source sequence) 
this class synchronizes only on the string buffer performing the operation, not on the source.
- It inherits some of the methods from the Object class which such as clone(), equals(), finalize(), getClass(), hashCode(), notifies(), notifyAll().

> Remember: 
StringBuilder, J2SE 5 adds a new string class to Javaâ€™s already powerful string handling capabilities. 
This new class is called StringBuilder. 
It is identical to StringBuffer except for one important difference: it is not synchronized, which means that it is not thread-safe. 
The advantage of StringBuilder is faster performance. 
However, in cases in which you are using multithreading,  you must use StringBuffer rather than StringBuilder.


