[r]
@rotate left
- e.g. [1,2,3] >> [2,3,1]
public int[] rotateLeft3(int[] nums) {
  int temp = 0;
  for(int i = 0; i< nums.length-1 ; i++){
    temp = nums[i] ;
    nums[i] = nums[i+1];
    nums[i+1] = temp;
  }
  return nums;
}

@reversed
- e.g.: [1,2,3] >> [3,2,1]
public int[] reverse3(int[] nums) {
  int[] reversed = new int [nums.length];
  for(int i = 0; i<nums.length; i++){
    reversed[i] = nums[nums.length - 1 - i];
  }
  return reversed;
}


[R]
@Given 2 int arrays, a and b, of any length, return a new array with the first element of each array. If either array is length 0, ignore that array.

public int[] front11(int[] a, int[] b) {
  if (a.length == 0 && b.length == 0)
  return new int[] {};
  
  else if (a.length !=0 && b.length == 0)
  return new int[]{a[0]};
  
  else if (a.length == 0 && b.length != 0)
  return new int[]{b[0]};
  else
  return new int[] {a[0],b[0]};
}

@ Given 2 arrays of ints, a and b, return true if they have the same first element or they have the same last element. Both arrays will be length 1 or more.

public boolean commonEnd(int[] a, int[] b) {
  return (a[0] == b[0] || a[a.length -1] == b[b.length -1] );     //#
}

@ Return an int array length 3 containing the first 3 digits of pi, {3, 1, 4}.
makePi() â†’ [3, 1, 4]

public int[] makePi() {
  return new int[] {3,1,4};
}

