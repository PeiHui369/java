Given is a 2-dimensional integer array [0..m-1, 0..n-1], each row and column of which is in ascending order (see example).
Write a Java program to find the row, column position of a specified number (row, column position) in a given 2-dimensional array.

public class w3 {

    public static void main(String[] args) {
        int nums[][] = {{12, 20, 30, 40},
                {15, 25, 35, 45},
                {24, 29, 39, 51},
                {35, 30, 39, 50},
                {50, 60, 75, 72}};

        int rows = 5;
        int search_element = 39;
        int ans[] = Saddleback(nums, rows - 1, 0, search_element);
        System.out.println("Position of "+search_element+" in the matrix is ("+ans[0] + "," + ans[1]+")");
    }

private static int[] Saddleback(int nums[][], int row, int col, int search_element) {

        //numsay to store the row and column of the searched element
        int element_pos[] = {-1, -1};
        if (row < 0 || col >= nums[row].length) {
            return element_pos;
        }
        if (nums[row][col] == search_element) {
            element_pos[0] = row;
            element_pos[1] = col;
            return element_pos;
        }
        //move up if the current element is greater than the given element  
        else if (nums[row][col] > search_element) {
            return Saddleback(nums, row - 1, col, search_element);
        }
        //otherwise move right
        return Saddleback(nums, row, col + 1, search_element);
    }

}

---------------------------------------------------------------------------

public class w3 {

    public static void main(String[] args) {
        int nums[][] = {{12, 20, 30, 40},
                {15, 25, 35, 45},
                {24, 29, 39, 51},
                {35, 30, 39, 50},
                {50, 60, 75, 72}};

        int rows = 5;
        int search_element = 39;
        int ans[] = Saddleback(nums, rows - 1, 0, search_element);
        System.out.println("Position of "+search_element+" in the matrix is ("+ans[0] + "," + ans[1]+")");
    }

    static int [] Saddleback(int[][] nums, int row, int col, int toFind) {
        int position[] = {-1, -1};

        //outOfBound >> notFound >> -1
        if (row < 0 || col >= nums[row].length) {
            return position;
        } //as row always move up, so outOfBound if <0; col always move right, increase, so outOfBound if larger than row length

        //if not this, try next
        if(nums[row][col] < toFind){
            //toFind bigger, so go to right
            return Saddleback(nums, row, col + 1, toFind);
        }else if(nums[row][col]>toFind){
            //toFind smaller, so go up (first ele in each row is the smallest in each row;)
            return Saddleback(nums, row-1, col, toFind);
        }else{
                position[0] = row;
                position[1] = col;
                return position;
        }
    }
}
