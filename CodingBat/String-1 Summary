@print middle 2 char
n = str.length()/2
str.substring(n-1,n+1)

@ first & last n chars
str.substring(0,n) + str.substring(str.length()-n)

@ min length
to get 3 char, str.length()>=3
str.substring(i,i+3)

@ get 3 middle char
str.substring(n-1,n+2);

@ from lessest length to longer length : if cond

@ min concat
- e.g.: minCat("Hello", "java") → "ellojava" || minCat("java", "Hello") → "javaello"

  int len = Math.min(a.length(),b.length());
  return a.substring(a.length()-len,a.length()) + b.substring(b.length()-len,b.length());

@ cond with return str first, follow by cond return str.substring, the lesser the behind

@ Access shortest length >> Access most to remove

@ 
Given a string and a second "word" string, we'll say that the word matches the string if it appears at the front of the string, except its first char does not need to match exactly. 
On a match, return the front of the string, or otherwise return the empty string. So, so with the string "hippo" the word "hi" returns "hi" and "xip" returns "hip". The word will be at least length 1.
startWord("hippo", "hi") → "hi"
startWord("hippo", "xip") → "hip"
startWord("hippo", "i") → "h"

public String startWord(String str, String word) {

  int lenStr = str.length();
  int lenWord = word.length();
  if (lenStr == 0)
    return "";
  if (lenWord > lenStr)
    return "";
  if (word.length() == 1)
    return str.substring(0,1);
  else if (str.substring(1,lenWord).equals(word.substring(1,lenWord)))
    return str.substring(0,lenWord);
  else
    return "";
}
