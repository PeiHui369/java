- compute the power of a number by implementing a calculator
- class MyCalculator{ method long power (int, int) //Takes 2 int, n & p --> finds n^p }
- either n or p negative, throw exception: "n or be should not be negative"
- both n and p zero, throw exception: "n and p should not be zero"
- return appropriate result

class C {
  accessModifier Type Method(Parameters) throws Exception{
  if()
    throw(new Exception("");
  else if()
    throw(new Exception("");
  else()
    return
}

===
import java.util.Scanner;
class MyCalculator {
    /*
    * Create the method long power(int, int) here.
    */
    public long power(int n,int p) throws Exception{
        if(n < 0 || p < 0)
            throw(new Exception("n or p should not be negative."));
        else if(n == 0 && p ==0)
            throw(new Exception("n and p should not be zero."));
        else
            return (long)Math.pow(n,p);
    }
    
}
public class Solution {
    public static final MyCalculator my_calculator = new MyCalculator();
    public static final Scanner in = new Scanner(System.in);
    
    public static void main(String[] args) {
        while (in .hasNextInt()) {
            int n = in .nextInt();
            int p = in .nextInt();
            
            try {
                System.out.println(my_calculator.power(n, p));
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }
}
