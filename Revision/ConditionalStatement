@ Solve quadratic equations: b^2 - 4ac [>0 2 roots, =0 1 root, <0 no real]
double result = b * b - 4.0 * a * c;
if (result > 0.0) {
                double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a);
                double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a);
                System.out.println("The roots are " + r1 + " and " + r2);
            } else if (result == 0.0) {
                double r1 = -b / (2.0 * a);
                System.out.println("The root is " + r1);
            } else {
                System.out.println("The equation has no real roots.");
            }
            
@ Input 3 num, greatest
if (num1 > num2)
   if (num1 > num3) //num1, then repeat for num2 & num3
   
@ Test same 3d.p.
        x = Math.round(x * 1000);
        x = x / 1000;

        y = Math.round(y * 1000);
        y = y / 1000;

        if (x == y){//true;}

@ num of days in a month
- switch
1, 3, 5, 7, 8. 10, 12 : 31
4, 6, 9, 11
2: if ((year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0))) { 29} else{ 28}

@ vowel or consonant
String input = in.next().toLowerCase();
        boolean uppercase = input.charAt(0) >= 65 && input.charAt(0) <= 90;
        boolean lowercase = input.charAt(0) >= 97 && input.charAt(0) <= 122;
        boolean vowels = input.equals("a") || input.equals("e") || input.equals("i")
                || input.equals("o") || input.equals("u");
if (input.length() > 1) { //Not single char;}
else if (!(uppercase || lowercase)){ //Not letter;}
else if (vowels) { //vowels;}
else{ //consonant;}

@ Leap year
boolean (x && (y || z))
x : (year % 4) == 0;
y :  (year % 100) != 0;
z : ((year % 100 == 0) && (year % 400 == 0));

@ Display n terms of natural numbers & sum
for(i=1;i<=n;i++)
   {
     System.out.println(i);
     sum+=i;
   }
   
 @ input 5 num, find sum & average
 for (i=0;i<5;i++)
		{
		    Scanner in = new Scanner(System.in);
		    n = in.nextInt();
		    
  		s +=n;
	}
	avg=s/5;
  
@ Multiplication table
  for(j=0;j<=n;j++)     //n is main, j is to multiply
  
     System.out.println(n+" X "+j+" = " +n*j);
   }

<SHAPE>
@ Display pattern like right angle triangle with a number
n=3
1                                                                                                       
12                                                                                                       
123 
  
 for(i=1;i<=n;i++)
   {
	for(j=1;j<=i;j++)
	  System.out.print(j);

    System.out.println("");
    }
    
@ Display pattern like right angle triangle with a number which will *repeat a number in a row*
n = 4
1
22
333
4444

for(i=1;i<=n;i++){
	           for(j=1;j<=i;j++)
	            System.out.print(i);
System.out.println("");
}

@ Display pattern like right angle triangle with *number increased by 1*
n = 4
1
2 3
4 5 6
7 8 9 10 

for(i=1;i<=n;i++)
   		{
		for(j=1;j<=i;j++)
	   	System.out.print(k++);
	   	System.out.println("");
	   	}
      
@ Display pattern like a *pyramid* with a number which will *repeat the number in the same row*.
n = 4
       1
      2 2
     3 3 3
    4 4 4 4  
    
s=n+4-1;
    for(i=1;i<=n;i++)
   {
   for(x=s;x!=0;x--)
    {
   System.out.print(" ");
    }
    for(j=1;j<=i;j++)
    {
     System.out.print(i+" ");
     }
	System.out.println();
    s--;
   }

  @ Floyd's Triangle
  Number of rows = 5
  1
  2 3
  4 5 6
  7 8 9 10
  11 12 13 14 15
  
  int number = 1;
   for (int row = 1; row <= numberOfRows; row++)
    {
   for (int column = 1; column <= row; column++)
     {
       System.out.print(number + " ");
       number++;
     }
     System.out.println();
    }
  
  @ Diamond
  No. of rows (half of the diamond) = 7
      *                                                                           
     ***                                                                         
    *****                                                                        
   *******                                                                       
  *********                                                                      
 ***********                                                                     
*************                                                                    
 ***********                                                                     
  *********                                                                      
   *******                                                                       
    *****                                                                        
     ***                                                                         
      * 
  
  for(i=0;i<=r;i++)
   {
     for(j=1;j<=r-i;j++)
     System.out.print(" ");
     for(j=1;j<=2*i-1;j++)
       System.out.print("*");
     System.out.print("\n");
   }
 
   for(i=r-1;i>=1;i--)
   {
     for(j=1;j<=r-i;j++)
     System.out.print(" ");
     for(j=1;j<=2*i-1;j++)
       System.out.print("*");
     System.out.print("\n");
   }
   
  @ Pascal's triangle
  Input number of rows: 5                                                          
      1                                                                          
     1 1                                                                         
    1 2 1                                                                        
   1 3 3 1                                                                       
  1 4 6 4 1       
  
for(i=0;i<no_row;i++)
    {
        for(blk=1;blk<=no_row-i;blk++)
        System.out.print(" ");
        for(j=0;j<=i;j++)
        {
            if (j==0||i==0)
                c=1;
            else
               c=c*(i-j+1)/j;
            System.out.print(" "+c);
        }
        System.out.print("\n");
    }
    
@ *'s triangle
n = 6
******                                                   
 *****                                                   
  ****                                                   
   ***                                                   
    **                                                   
     * 

for (int i = n; i > 0; i--) 
        {
            for (int spc = n - i; spc > 0; spc--) 
            {
                System.out.print(" ");
            }
            for (int j = 0; j < i; j++) 
            {
                System.out.print("*");
            }
            System.out.println();
        }
	
@ generate @'s triangle
n = 6
      @                                                  
     @@                                                  
    @@@                                                  
   @@@@                                                  
  @@@@@                                                  
 @@@@@@
 
 for (int i = 0; i < n; i++) 
        {
            for (int spc = n - i; spc > 0; spc--) 
            {
                System.out.print(" ");
            }
            for (int j = 0; j <= i; j++) 
            {
                System.out.print("@");
            }
            System.out.println();
        }
	
@ number rhombus
n = 7
      1                                                  
     212                                                 
    32123                                                
   4321234                                               
  543212345                                              
 65432123456                                             
7654321234567                                            
 65432123456                                             
  543212345                                              
   4321234                                               
    32123                                                
     212                                                 
      1   
  
int count = 1;
        int no_of_spaces = 1;
        int start = 0;

        for (int i = 1; i < (n * 2); i++) 
        {

            for (int spc = n - no_of_spaces; spc > 0; spc--) 
            {
                System.out.print(" ");
            }
            if (i < n) 
            {
                start = i;          //for number
                no_of_spaces++;    //for spaces
            } else 
            {
                start = n * 2 - i;   //for number
                no_of_spaces--;      //for space
            }
            for (int j = 0; j < count; j++) 
            {
                System.out.print(start);
                if (j < count / 2) 
                {
                    start--;
                } else 
                {
                    start++;
                }
            }
            if (i < n)
            {
                count = count + 2;
            } else {
                count = count - 2;
            }

            System.out.println();
        }
	
	
@ character rhombus
n = 7
      A                                                  
     ABA                                                 
    ABCBA                                                
   ABCDCBA                                               
  ABCDEDCBA                                              
 ABCDEFEDCBA                                             
ABCDEFGFEDCBA                                            
 ABCDEFEDCBA                                             
  ABCDEDCBA                                              
   ABCDCBA                                               
    ABCBA                                                
     ABA                                                 
      A    
      
@ all 3 nums equal, different, neither all equal/diff
if (x == y && x == z)
        {
            System.out.println("All numbers are equal");
        }
        else if ((x == y) || (x == z) || (z == y))
        {
            System.out.println("Neither all are equal or different");
        }
        else
        {
            System.out.println("All numbers are different");
        }

@ 3 nums order
if (x < y && y < z)
        {
            System.out.println("Increasing order");
        }
        else if (x > y && y > z)
        {
            System.out.println("Decreasing order");
        }
        else
        {
            System.out.println("Neither increasing or decreasing order");
        }

@ check same up to 2 d.p.
if (Math.abs(num1 - num2) <= 0.01) { 
     System.out.println("These numbers are the same."); 
 } 
