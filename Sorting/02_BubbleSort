
Starting Bubble Sort
5,4,3,2,1

Each pass: Move left to right swapping adjacent elements as needed
Each pass: Moves the next largest element into its final position

1st pass: 
4 5 3 2 1
4 3 5 2 1
4 3 2 5 1
4 3 2 1 5
>> (5) Last element processed in final position

2nd pass:
3 4 2 1 5
3 2 4 1 5
3 2 1 4 5
>> (4) Last element processed in final position

3rd pass:
2 3 1 4 5
2 1 3 4 5
>> (3) Last element processed in final position

4th pass:
1 2 3 4 5
>> (2) Last element processed in final position

Compare, prev < next, no swap, done sort.

--------------------------------------------------------------
import java.util.Arrays;
class BubbleSort
{
    void bubbleSort(int[] nums){
        for(int i = 0; i<nums.length-1; i++){
            for(int j = 1; j<nums.length-1-i; j++){
                if(nums[i]>nums[j]){
                    int temp = nums[i];
                    nums[i] = nums[j];
                    nums[j] = temp;
                }
            }
        }
    }

    // Method to test above
    public static void main(String args[])
    {
        BubbleSort ob = new BubbleSort();
        int nums[] = {7, -5, 3, 2, 1, 0, 45};
        System.out.println("Original Array:");
        System.out.println(Arrays.toString(nums));
        ob.bubbleSort(nums);
        System.out.println("Sorted Array");
        System.out.println(Arrays.toString(nums));
    }
}

-------------------------------------------------------
Original Array:
[7, -5, 3, 2, 1, 0, 45]
Sorted Array
[-5, 7, 3, 1, 2, 0, 45]
