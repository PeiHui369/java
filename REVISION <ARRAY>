<Challenging>
@ remove ele (X alter size, after removal last ele exist twice)
for(int i = removeIndex; i < my_array.length -1; i++){
        my_array[i] = my_array[i + 1];
      }

@ Insert ele (specific position)
for(int i=my_array.length-1; i > Index_position; i--){
    my_array[i] = my_array[i-1];
   }
   my_array[Index_position] = newValue;

@ Find duplicate
for (int i = 0; i < my_array.length-1; i++)
        {
            for (int j = i+1; j < my_array.length; j++)
            {
                if ((my_array[i] == my_array[j]) && (i != j)) //(my_array[i].equals(my_array[j])) for string
                { //print my_array[j]

@ Remove duplicate
int no_unique_elements = my_array.length;                           //assume all ele unique
 for (int i = 0; i < no_unique_elements; i++) 
        {
            for (int j = i+1; j < no_unique_elements; j++)
            {
              if(my_array[i] == my_array[j])                        //2 eles found equal
                {
                    my_array[j] = my_array[no_unique_elements-1];   //replace duplicate ele with last unique
                    no_unique_elements--; 
                    j--; }}}
int[] array1 = Arrays.copyOf(my_array, no_unique_elements);  //Copying only unique elements to newArr

@ Find common (int)
for (int i = 0; i < array1.length; i++)
        {
            for (int j = 0; j < array2.length; j++)
            {
                if(array1[i] == (array2[j]))
                { //print array1[i]

@ Find common (str)
HashSet<String> set = new HashSet<String>();
 
        for (int i = 0; i < array1.length; i++)
        {
            for (int j = 0; j < array2.length; j++)
            {
                if(array1[i].equals(array2[j]))
                {
                    set.add(array1[i]); }}} //print (set)

@ Find all pairs of eles sum = specified num
for (int i =  0; i < inputArray.length; i++)
  {
  for (int j  = i+1; j < inputArray.length; j++)
  {
  if(inputArray[i]+inputArray[j] == inputNumber)
  { //then print arr[i], arr[j]
<Random>
@ Sort
Arrays.sort(arrName)

@ sum
for (int i : my_array)
    sum += i;
@ average = sum/numbers.length;

@ contains value
for (int n : arr) {
         if (item == n) {
            return true;
         }
      }

@ find index of ele
int i = 0;
        while (i < len) {
            if (my_array[i] == t) return i;
            else i=i+1;
        }

@ copy by iterating
for(int i=0; i < my_array.length; i++) {
    new_array[i] = my_array[i];
}

@ reverse
for(int i = 0; i < my_array1.length / 2; i++)
  {
    int temp = my_array1[i];
    my_array1[i] = my_array1[my_array1.length - i - 1];   //#
    my_array1[my_array1.length - i - 1] = temp;
  }

@ max min
int len = my_array.length;
        if (len < 1) {
            max = -1;
            min = -1;
        }
        if (len >= 1) {
            max = my_array[0];
            min = my_array[0];
            for (int i = 1; i < len; i++) {
                if (my_array[i] > max) max = my_array[i];
                if (my_array[i] < min) min = my_array[i];
            }
        }

@ find 2nd largest ele
Arrays.sort(arr)
//print (arr[arr.length - 1 -1]);

@ find 2nd smallest ele
Arrays.sort(arr)
// print (arr[1]);

@ add 2 matrices of same size
for ( c = 0 ; c < m ; c++ )
         for ( d = 0 ; d < n ; d++ )
             sum[c][d] = array1[c][d] + array2[c][d]; 


<OutTopic>

@ Convert to ArrayList
 ArrayList<String>  list = new ArrayList<String>(Arrays.asList(oriArrName));

@ Convert from ArrayList
String[]  my_array = new String[list.size()];
  list.toArray(my_array);

@ test equality
boolean  equalOrNot = true;
  
  if(my_array1.length == my_array2.length)
  {
  for (int i  = 0; i < my_array1.length; i++)
  {
  if(my_array1[i] != my_array2[i])
  {
  equalOrNot = false;

<Exception>
if (arr == null) return -1;

<SHAPE>
@
- - - -
- - - -
- - - -
- - - -
int [][]a = new int[4][4];    
 for(int i = 0; i < 4; i++)
   {
      for(int j = 0; j < 4; j++)
      {
         System.out.printf("%2d ", a[i][j]);   //print the char
      }
      System.out.println(); //new line after every 4 column
   }
