- Dynamic array for storing elements
- No size limit
- Can add/remove elements anytime (more flexible)
- Can have duplicate elements
- Implements List interface (can use all List methods)

* Use wrapper class to create
ArrayList <Integer> varName = new ArrayList <Integer> ();

>> Constructors
ArrayList(): used to build an empty array list.
ArrayList(Collection<? extends E> c): used to build an array list that is initialized with the elements of the collection c.
ArrayList(int capacity): used to build an array list that has the specified initial capacity.

>> Methods
void add(int index, E element): It is used to insert the specified element at the specified position in a list.

boolean add(E e) : It is used to append the specified element at the end of a list.

boolean addAll(Collection<? extends E> c)   : It is used to append all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.

boolean addAll(int index, Collection<? extends E> c)	: It is used to append all the elements in the specified collection, starting at the specified position of the list.

void clear()	: It is used to remove all of the elements from this list.

void ensureCapacity(int requiredCapacity)	: It is used to enhance the capacity of an ArrayList instance.

E get(int index)	: It is used to fetch the element from the particular position of the list.

boolean isEmpty()	: It returns true if the list is empty, otherwise false.

Iterator()	

listIterator()	

int lastIndexOf(Object o)	: It is used to return the index in this list of the last occurrence of the specified element, or -1 if the list does not contain this element.

Object[] toArray() :	It is used to return an array containing all of the elements in this list in the correct order.

<T> T[] toArray(T[] a) :	It is used to return an array containing all of the elements in this list in the correct order.

Object clone() :	It is used to return a shallow copy of an ArrayList.

boolean contains(Object o) :	It returns true if the list contains the specified element.

int indexOf(Object o) :	It is used to return the index in this list of the first occurrence of the specified element, or -1 if the List does not contain this element.

E remove(int index) : It is used to remove the element present at the specified position in the list.

boolean remove(Object o)	: It is used to remove the first occurrence of the specified element.

boolean removeAll(Collection<?> c)	: It is used to remove all the elements from the list.

boolean removeIf(Predicate<? super E> filter) :	It is used to remove all the elements from the list that satisfies the given predicate.

protected void removeRange(int fromIndex, int toIndex) :	It is used to remove all the elements lies within the given range.

void replaceAll(UnaryOperator<E> operator):	It is used to replace all the elements from the list with the specified element.

void retainAll(Collection<?> c)	: It is used to retain all the elements in the list that are present in the specified collection.

E set(int index, E element) :	It is used to replace the specified element in the list, present at the specified position.

void sort(Comparator<? super E> c)	: It is used to sort the elements of the list on the basis of the specified comparator.

Spliterator<E> spliterator()	: It is used to create a spliterator over the elements in a list.

List<E> subList(int fromIndex, int toIndex)	: It is used to fetch all the elements that lies within the given range.

int size() :	It is used to return the number of elements present in the list.

void trimToSize() :	It is used to trim the capacity of this ArrayList instance to be the list's current size.


>> Example 1
import java.util.*;  
 public class ArrayListExample1{  
 public static void main(String args[]){  
  ArrayList<String> list=new ArrayList<String>();//Creating arraylist     #
      list.add("Mango");//Adding object in arraylist                      #
      list.add("Apple");    
      list.add("Banana");    
      list.add("Grapes");    
      //Printing the arraylist object   
      System.out.println(list);  
 }  
}  

>> Iterating ArrayList using Iterator (Traverse elements)
import java.util.*;  
public class ArrayListExample2{  
 public static void main(String args[]){  
  ArrayList<String> list=new ArrayList<String>();//Creating arraylist  
  list.add("Mango");//Adding object in arraylist    
  list.add("Apple");    
  list.add("Banana");    
  list.add("Grapes");    
  //Traversing list through Iterator  
  Iterator itr=list.iterator();//getting the Iterator                     #
  while(itr.hasNext()){//check if iterator has the elements               #
   System.out.println(itr.next());//printing the element and move to next #
  }  
 }  
}  

>> Iterating ArrayList using For-each Loop
import java.util.*;  
public class ArrayListExample3{  
 public static void main(String args[]){  
  ArrayList<String> list=new ArrayList<String>();//Creating arraylist  
  list.add("Mango");//Adding object in arraylist    
  list.add("Apple");    
  list.add("Banana");    
  list.add("Grapes");    
  //Traversing list through for-each loop  
  for(String fruit:list)                        #
    System.out.println(fruit);            
    }
  }
  
  >> Get & Set ArrayList
  get(): returns element at specified index
  set(): changes element
  import java.util.*;  
public class ArrayListExample4{  
 public static void main(String args[]){  
  ArrayList<String> al=new ArrayList<String>();  
  al.add("Mango");  
  al.add("Apple");  
  al.add("Banana");  
  al.add("Grapes");  
  //accessing the element    
  System.out.println("Returning element: "+al.get(1));//# it will return the 2nd element, because index starts from 0  
  //changing the element  
  al.set(1,"Dates");                                    #
  //Traversing list  
  for(String fruit:al)    
    System.out.println(fruit);    
 }  
}  

>> To sort: Collections.sort(arrListName)
import java.util.*;  
class SortArrayList{  
 public static void main(String args[]){  
  //Creating a list of fruits  
  List<String> list1=new ArrayList<String>();  
  list1.add("Mango");  
  list1.add("Apple");  
  list1.add("Banana");  
  list1.add("Grapes");  
  //Sorting the list  
  Collections.sort(list1);  
   //Traversing list through the for-each loop  
  for(String fruit:list1)  
    System.out.println(fruit);  
      
 System.out.println("Sorting numbers...");  
  //Creating a list of numbers  
  List<Integer> list2=new ArrayList<Integer>();  
  list2.add(21);  
  list2.add(11);  
  list2.add(51);  
  list2.add(1);  
  //Sorting the list  
  Collections.sort(list2);  
   //Traversing list through the for-each loop  
  for(Integer number:list2)  
    System.out.println(number);  
 }  
   
}  

https://www.javatpoint.com/java-arraylist
//Until iterating through remaining ways
  
  
