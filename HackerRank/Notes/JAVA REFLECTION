<Cat.java>
package com.codingwithjohn.reflection;

public class Cat{
  private final String name;
  private int age;
  
  public Cat(String name, int age){
    this.name = name;
    this.age = age;
  }
  
  public String getName(){
    return name;
  }
  
   public int getAge(){
    return age;
  }
  
<ReflectionTutorial>
import java.lang.reflect.Field;

public class Reflection Tutorial {
   public static void main(String[] args){
    Cat myCat = new Cat("Stella", 6);
    Field[] catFields = myCat.getClass().getDeclaredFields(); //#
    
    for(Field field : catFields){
    System.out.println(field.getName());
    }
}
}

>>
name
age

==================================
<Cat.java>
package com.codingwithjohn.reflection;

public class Cat{
  private final String name;          //outside no access, have accessor(Get) & mutator (set); final cannot be reset
  private int age;
  
  public Cat(String name, int age){
    this.name = name;
    this.age = age;
  }
  
  public String getName(){
    return name;
  }
  
  public int getAge(){
    return age;
  }
  
<ReflectionTutorial>
import java.lang.reflect.Field;

public class Reflection Tutorial {
   public static void main(String[] args){
    Cat myCat = new Cat("Stella", 6);
    //myCat.name = "newValue" >>Error
    Field[] catFields = myCat.getClass().getDeclaredFields(); //#
    
    for(Field field : catFields){
    System.out.println(field.getName());
    }
}
}

===============REFLECTION VANISH RULES ABOVE: MANIPULATE PRIVATE FINAL==========================
<Cat.java>
package com.codingwithjohn.reflection;

public class Cat{
  private final String name;
  private int age;
  
  public Cat(String name, int age){
    this.name = name;
    this.age = age;
  }
  
  public String getName(){
    return name;
  }
  
   public int getAge(){
    return age;
  }
  
<ReflectionTutorial>
import java.lang.reflect.Field;

public class Reflection Tutorial {
   public static void main(String[] args) throws Exception{
    Cat myCat = new Cat("Stella", 6);
    Field[] catFields = myCat.getClass().getDeclaredFields(); 
    
    #
    for(Field field : catFields){
      if(field.getName().equals("name")){
        field.setAccessible(true);
        field.set(myCat, "Jimmy McGill"); //field.set(object, newFieldValue)
      }
    }
    #
    
    //System.out.println(myCat.getName()); >>Jimmy McGill
}
}
-----------------------------------------------------------------
<Cat.java>
package com.codingwithjohn.reflection;

public class Cat{
  private final String name;
  private int age;
  
  public Cat(String name, int age){
    this.name = name;
    this.age = age;
  }
  
  public String getName(){
    return name;
  }
  
   public int getAge(){
    return age;
  }
  
<ReflectionTutorial>
import java.lang.reflect.Field;

public class Reflection Tutorial {
   public static void main(String[] args) throws Exception{
    Cat myCat = new Cat("Stella", 6);
    Field[] catFields = myCat.getClass().getDeclaredFields(); 
    
    for(Field field : catFields){
      if(field.getName().equals("name")){
        field.setAccessible(true);
        field.set(myCat, "Jimmy McGill"); //field.set(object, newFieldValue)
      }
    }
    
    #
    Method[] catMethods = myCat.getClass().getDeclaredMethods();
    for(Method method : catMethods){
      System.out.println(method.getName());
    }

}
}
>>
getName
thisIsAPublicStaticMethod
setAge
heyThisIsPrivate
getAge
meow
thisIsAPrivateStaticMethod
Jimmy McGill
//Printing out all declared method

 ------------------------------------------
 @EXECUTE METHOD
 <Cat.java>
package com.codingwithjohn.reflection;

public class Cat{
  private final String name;
  private int age;
  
  public Cat(String name, int age){
    this.name = name;
    this.age = age;
  }
  
  public String getName(){
    return name;
  }
  
   public int getAge(){
    return age;
  }
  
  public void meow(){ //No parameter
    System.out.println("Meow");
  }
  
<ReflectionTutorial>
import java.lang.reflect.Field;

public class Reflection Tutorial {
   public static void main(String[] args) throws Exception{
    Cat myCat = new Cat("Stella", 6);
    Field[] catFields = myCat.getClass().getDeclaredFields(); 
    
    for(Field field : catFields){
      if(field.getName().equals("name")){
        field.setAccessible(true);
        field.set(myCat, "Jimmy McGill"); //field.set(object, newFieldValue)
      }
    }
    
    Method[] catMethods = myCat.getClass().getDeclaredMethods();
    
    //myCat.meow(); //for public method
    //myCat.heyThisIsPrivate(); //private method will have error
    
    for(Method method : catMethods){
      if(method.getName().equals("heyThissPrivate")){ //without parameter
        method.setAccessible(true);
        method.invoke(myCat); //if have parameter (object, parameter1, ...); //if is static method, pass obj as null
      }
    }
  }
}

 
 
 - For FrameWork
 - Way easy to break everything
 - Slower code
