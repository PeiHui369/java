---Draft idea---
//generics= enable types(classes and interfaces) to be parameters when defining:
//          classes, interfaces and method
//          a benefit is to eliminate the need to create multiple versions
//          of methods or classes for various data types.
//          Use 1 version for all reference data types

import javax.swing.*;

public class Main {
    public static void main(String[] args){

        Integer[] intArray = {1,2,3,4,5};
        Double[] doubleArray = {5.5, 4.4, 3.3, 2.2, 1.1};
        Character[] charArray = {'H', 'E', 'L', 'L', 'O'};
        String[] stringArray = {"B","Y","E"};
        displayArray(intArray);
        displayArray(doubleArray);
        displayArray(charArray);
        displayArray(stringArray);
    }

    public static void displayArray(Integer[] array){
        for(Integer x: array){
            System.out.print(x+" ");
        }
        System.out.println();
    }
    public static void displayArray(Double[] array){
        for(Double x: array){
            System.out.print(x+" ");
        }
        System.out.println();
    }
    public static void displayArray(Character[] array){
        for(Character x: array){
            System.out.print(x+" ");
        }
        System.out.println();
    }
    public static void displayArray(String[] array){
        for(String x: array){
            System.out.print(x+" ");
        }
        System.out.println();
    }
}

---Apply Generics---
public class Main {
    public static void main(String[] args){

        Integer[] intArray = {1,2,3,4,5};
        Double[] doubleArray = {5.5, 4.4, 3.3, 2.2, 1.1};
        Character[] charArray = {'H', 'E', 'L', 'L', 'O'};
        String[] stringArray = {"B","Y","E"};
        
    }

    public static <Thing> void displayArray(Thing[] array){ //Apply generic
        for(Thing x: array){
            System.out.print(x+" ");
        }
        System.out.println();
      }
    }

---To print the first element of each array---
public class Main {
    public static void main(String[] args){

        Integer[] intArray = {1,2,3,4,5};
        Double[] doubleArray = {5.5, 4.4, 3.3, 2.2, 1.1};
        Character[] charArray = {'H', 'E', 'L', 'L', 'O'};
        String[] stringArray = {"B","Y","E"};

        System.out.println(getFirst(intArray));
        System.out.println(getFirst(doubleArray));
        System.out.println(getFirst(charArray));
        System.out.println(getFirst(stringArray));
    }

    public static <Thing> void displayArray(Thing[] array){ //Apply generic
        for(Thing x: array){
            System.out.print(x+" ");
        }
        System.out.println();
    }
    public static <Thing> Thing getFirst(Thing[] array){//no void because returning smtg
        return array[0];}
}

---To create a method that accepts all data type (DRAW)---
public class Main {
    public static void main(String[] args) {
        Player player = new Player();
        Enemy enemy = new Enemy();
        Item item = new Item();
        Tree tree = new Tree();

        draw(player);
        draw(enemy);
        draw(item);
        draw(tree);
    }

    public static <Thing> void draw (Thing x){
        x.draw();
    }
}

---Generic CLasses---
