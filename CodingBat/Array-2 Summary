@contains a 2 next to 2
for(int i = 0; i<nums.length-1; i++){
if(nums[i] == 2 && nums[i+1] == 2){
      return true;
    }

@fizzArray: 
- new int [desired_length]
e.g. fizzArray(4) → [0, 1, 2, 3]

int [] arr = new int [n];
  for(int i = 0; i<n; i++){
    arr[i] = i;
  }

- new String[desired_length]
e.g. fizzArray(4) -> ["0", "1", "2", "3"]
    for (int i = 0; i < n; i++)
        result[i] = String.valueOf(i);      //#Convert int to string: String.valueOf(i)

  
@ element only 1 or 4
if(!(nums[i]==1 || nums[i]==4)){return false;}

[r]
@To not add 13 and the num next to it
 if(nums[i]==13){
      i++;
    }else{
      sum+=nums[i];
    }
    
 @  return true if it contains no 1's or it contains no 4's
//# Set find each as if condition, if(true&&true){false}
public boolean no14(int[] nums) {
boolean two = false,four = false;
for(int count = 0;count <nums.length; count++) {
if (nums[count] == 1)
two = true;
if(nums[count] == 4)
four = true;
 }
if(nums.length == 0 || nums.length == 1)
return true;
else if (two ==true && four ==true)
 return false;
else if (two || four)
return true;
else
return false; }


[R]
@
Return the "centered" average of an array of ints, which we'll say is the mean average of the values, except 
//ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array is length 3 or more.

centeredAverage([1, 2, 3, 4, 100]) → 3
centeredAverage([1, 1, 5, 5, 10, 8, 7]) → 5
centeredAverage([-10, -4, -2, -4, -2, 0]) → -3

public int centeredAverage(int[] nums) {
  //Initialize min & max as first element
  int min = nums[0];
  int max = nums[0];
  int sum = 0;
  
  for(int i=0; i<nums.length; i++){
    sum+=nums[i];                     //Add all element
    min = Math.min(min, nums[i]);     //Compare >> find min
    max = Math.max(max, nums[i]);     //Compare >> find max
  }
  
  sum = sum - max - min;              //sum include largest & smallest
  int avg = sum/(nums.length-2);      //find average of remaining sum of remaining elements
  return avg;
}

@ 
We'll say that a value is "everywhere" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.

isEverywhere([1, 2, 1, 3], 1) → true
isEverywhere([1, 2, 1, 3], 2) → false
isEverywhere([1, 2, 1, 3, 4], 1) → false

public boolean isEverywhere(int[] nums, int val) {
boolean result = true;
for (int i = 0; i <=nums.length-2;i++)
{
if ( nums[i] != val && nums[i+1] != val)
result = false;
}
  return result;
}
