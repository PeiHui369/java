/*
BitSet class implements a vector of bit values: false(0) or true(1)[set bit] --> manipulate bits while optimizing space

@ 
Given 2 BitSets, B1 & B2 of size N
all bits initialized to 0 perform a series of M operations
After each operation, print no. of set bits in the respective BitSets as 2 space-separated integers on a new line
1st line: 2 space separated integers N (length of both BitSets) & M (no. of operations to perform)
AND     <set>   <set>
OR      <set>   <set> 
XOR     <set>   <set> 
FLIP    <set>   <index>
SET     <set>   <index> 
<set>: int 1(B1) or 2 (B2)
<index>: int denoting a bit's index in BitSet corresponding to <set>
OPERATION LEFT_OPERAND  RIGHT_OPERAND

BitSet b1 = new BitSet(n);
BitSet b2 = new BitSet(n);
BitSet[] bs = new BitSet[3];
bs[1] = b1; 
bs[2] = b2;
 switch(op){
        case("AND"):
            bs[x].and(bs[y]);
            break;
        case("OR"):
            bs[x].or(bs[y]);
            break;
        case("SET"):
            bs[x].set(y);
            break;
        case("FLIP"):
            bs[x].flip(y);
            break;
        case("XOR"):
            bs[x].xor(bs[y]);
    }
    System.out.println(b1.cardinality() + " " + b2.cardinality());
}

*/

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
         Scanner sc = new Scanner(System.in); int n = sc.nextInt(); int m = sc.nextInt();

BitSet b1 = new BitSet(n);
BitSet b2 = new BitSet(n);
BitSet[] bs = new BitSet[3];

bs[1] = b1; 
bs[2] = b2;

for (int i = 0; i < m; i++){
    String op = sc.next();
    int x = sc.nextInt();
    int y = sc.nextInt();

    switch(op){
        case("AND"):
            bs[x].and(bs[y]);
            break;
        case("OR"):
            bs[x].or(bs[y]);
            break;
        case("SET"):
            bs[x].set(y);
            break;
        case("FLIP"):
            bs[x].flip(y);
            break;
        case("XOR"):
            bs[x].xor(bs[y]);
    }
    System.out.println(b1.cardinality() + " " + b2.cardinality());
}
    }
}
